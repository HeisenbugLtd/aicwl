with "gtkada.gpr";

project Gtkada_Contributions is

   type Legacy_Type is ("Ada95", "Ada2005", "Ada2012");
   Legacy : Legacy_Type := external ("Legacy", "Ada2012");

   type Development_Type is ("Debug", "Release", "Profile");
   Development : Development_Type := external ("Development", "Debug");

   type OS_Type is
        (  "Windows", "Windows_NT",
           "Linux",
           "UNIX",
           "OSX",
           "FreeBSD",
           "auto"
        );
   Target_OS : OS_Type := external ("Target_OS", "auto");

   type Arch_Type is ("x86_64", "i686", "armhf", "aarch64", "auto");
   Arch : Arch_Type := external ("arch", "auto");

   type Object_Dir_Scheme_Type is (".", "nested");
   Object_Dir_Scheme : Object_Dir_Scheme_Type :=
      external ("Object_Dir", ".");

   Target_Triplet := Project'Target;

   case Arch is
      when "auto" =>
         case Target_Triplet is
            when "aarch64-linux-gnu" =>
               Arch := "aarch64";
            when "arm-linux"           |
                 "arm-linux-gnueabi"   |
                 "arm-linux-gnueabihf" =>
               Arch := "armhf";
            when "x86_64-apple-darwin" |
                 "x86_64-darwin"       |
                 "x86_64-freebsd"      |
                 "x86_64-linux"        |
                 "x86_64-linux-gnu"    |
                 "x86_64-pc-cygwin"    |
                 "x86_64-redhat-linux" |
                 "x86_64-suse-linux"   |
                 "x86_64-w64-mingw32"  |
                 "x86_64-windows"      |
                 "x86-darwin"          |
                 "x86-linux"           |
                 "x86-suse-linux"      |
                 "x86-windows"         =>
               Arch := "x86_64";
            when "i686-freebsd"        |
                 "i686-linux-gnu"      |
                 "i686-pc-cygwin"      |
                 "i686-pc-mingw32"     |
                 "i686-redhat-linux"   |
                 "i686-suse-linux"     |
                 "i686-w64-mingw32"    =>
               Arch := "i686";
            when others =>
               null;
         end case;
      when others =>
         null;
   end case;

   case Target_OS is
      when "auto" =>
         case Target_Triplet is
            when "aarch64-linux-gnu"   |
                 "arm-linux"           |
                 "arm-linux-gnueabi"   |
                 "arm-linux-gnueabihf" |
                 "x86_64-linux"        |
                 "x86_64-linux-gnu"    |
                 "x86_64-redhat-linux" |
                 "x86_64-suse-linux"   |
                 "x86-linux"           |
                 "x86-suse-linux"      |
                 "i686-linux-gnu"      |
                 "i686-redhat-linux"   |
                 "i686-suse-linux"     =>
               Target_OS := "Linux";
            when "x86_64-apple-darwin" |
                 "x86_64-darwin"       |
                 "x86-darwin"          =>
               Target_OS := "OSX";
            when "x86_64-freebsd"      |
                 "i686-freebsd"        =>
               Target_OS := "FreeBSD";
            when "x86_64-pc-cygwin"    |
                 "x86_64-w64-mingw32"  |
                 "x86_64-windows"      |
                 "x86-windows"         |
                 "i686-pc-cygwin"      |
                 "i686-pc-mingw32"     |
                 "i686-w64-mingw32"    =>
               Target_OS := "Windows";
            when others =>
               null;
         end case;
      when others =>
         null;
   end case;

   for Source_Dirs use (".");

   Object_Dir_Path := "";
   case Object_Dir_Scheme is
      when "." =>
         Object_Dir_Path := ".";
      when "nested" =>
         case Target_OS is
            when "Windows" | "Windows_NT" =>
               Object_Dir_Path :=
                  "obj/windows/" & arch & "/" & Development;
            when "Linux" | "UNIX" =>
               Object_Dir_Path :=
                  "obj/linux/" & arch & "/" & Development;
            when "OSX" =>
               Object_Dir_Path :=
                  "obj/osx/" & arch & "/" & Development;
            when "FreeBSD" =>
               Object_Dir_Path :=
                  "obj/freebsd/" & arch & "/" & Development;
            when "auto" =>
               Object_Dir_Path :=
                  "obj/unknown/" & arch & "/" & Development;
         end case;
   end case;
   for Object_Dir use Object_Dir_Path;

   for Source_Dirs use (".");
   for Source_Files use
       (  "gdk-color-ihls.adb",
          "gdk-color-ihls.ads",
          "gdk-pixbuf-conversions.ads",
          "gdk-pixbuf-image.adb",
          "gdk-pixbuf-image.ads",
          "gio.ads",
          "gio-content_type.adb",
          "gio-content_type.ads",
          "gio-drive.adb",
          "gio-drive.ads",
          "gio-mount.adb",
          "gio-mount.ads",
          "gio-volume.adb",
          "gio-volume.ads",
          "gio-volume_monitor.adb",
          "gio-volume_monitor.ads",
          "glib-chars_ptr_vectors.adb",
          "glib-chars_ptr_vectors.ads",
          "glib-object-checked_destroy.adb",
          "glib-object-checked_destroy.ads",
          "glib-object-ref_count.adb",
          "glib-object-ref_count.ads",
          "glib-object-strong_references.adb",
          "glib-object-strong_references.ads",
          "glib-object-weak_references.adb",
          "glib-object-weak_references.ads",
          "glib-properties-icon_size.ads",
          "glib-properties-relief_style.ads",
          "glib-spawn_alt.adb",
          "glib-spawn_alt.ads",
          "glib-spawn_alt-asynchronous.adb",
          "glib-spawn_alt-asynchronous.ads",
          "glib-spawn_alt-text_bufferred.adb",
          "glib-spawn_alt-text_bufferred.ads",
          "glib-time_zone.adb",
          "glib-time_zone.ads",
          "glib-values-handling.adb",
          "glib-values-handling.ads",
          "glib-wrappers.adb",
          "glib-wrappers.ads",
          "gtk-abstract_browser.adb",
          "gtk-abstract_browser.ads",
          "gtk-cell_renderer-abstract_renderer.adb",
          "gtk-cell_renderer-abstract_renderer.ads",
          "gtk-cell_renderer_fixed.adb",
          "gtk-cell_renderer_fixed.ads",
          "gtk-enums-string_lists.adb",
          "gtk-enums-string_lists.ads",
          "gtk-generic_enum_combo_box.adb",
          "gtk-generic_enum_combo_box.ads",
          "gtk-generic_style_button.adb",
          "gtk-generic_style_button.ads",
          "gtk-handlers-references.adb",
          "gtk-handlers-references.ads",
          "gtk-handlers-generic_callback.adb",
          "gtk-handlers-generic_callback.ads",
          "gtk-image_button.adb",
          "gtk-image_button.ads",
          "gtk-main-router-gnat_stack.adb",
          "gtk-main-router-gnat_stack.ads",
          "gtk-main-router.adb",
          "gtk-main-router.ads",
          "gtk-missed.adb",
          "gtk-missed.ads",
          "gtk-recent_manager_alt.adb",
          "gtk-recent_manager_alt.ads",
          "gtk-recent_manager_keys.adb",
          "gtk-recent_manager_keys.ads",
          "gtk-tree_model-abstract_store.adb",
          "gtk-tree_model-abstract_store.ads",
          "gtk-tree_model-columned_store.adb",
          "gtk-tree_model-columned_store.ads",
          "gtk-tree_model-extension_store.adb",
          "gtk-tree_model-extension_store.ads",
          "gtk-tree_model-generic_sort.adb",
          "gtk-tree_model-generic_sort.ads",
          "gtk-widget-styles-css_store.adb",
          "gtk-widget-styles-css_store.ads",
          "gtk-widget-styles-generic_enumeration.adb",
          "gtk-widget-styles-generic_enumeration.ads",
          "gtk-widget-styles-icon_size.ads",
          "gtk-widget-styles-relief_style.ads",
          "gtk-widget-styles-store.adb",
          "gtk-widget-styles-store.ads",
          "gtk-widget-styles.adb",
          "gtk-widget-styles.ads"
       );

   GNAT_XX := "";

   case Legacy is
      when "Ada95" =>
         GNAT_XX := "-gnat95";
      when "Ada2005" =>
         GNAT_XX := "-gnat2005";
      when "Ada2012" =>
         GNAT_XX := "-gnat2012";
   end case;

   package Binder is
      case Development is
         when "Debug" =>
            for Default_Switches ("ada") use ("-Es");
         when "Release" =>
            for Default_Switches ("ada") use ();
         when others =>
            null;
      end case;
   end Binder;

   package Builder is
      case Development is
         when "Debug" =>
            for Default_Switches ("ada") use ("-g");
         when "Release" =>
            for Default_Switches ("ada") use ("-s");
         when others =>
            null;
      end case;
   end Builder;

   package Compiler is
      case Development is
         when "Debug" =>
            for Default_Switches ("ada") use
                (  "-gnatwcikmoprvz.c.p.t.w.x",
                   "-gnato",
                   "-gnatVaep",
                   "-gnatf",
                   "-gnatU",
                   "-g",
                   "-fstack-check",
                   "-Wall"
                )  & GNAT_XX;
         when "Release" =>
            for Default_Switches ("ada") use
                (  "-gnatwcikmoprvz.c.p.t.w.x",
                   "-gnatp",
                   "-gnatVaep",
                   "-gnatf",
                   "-gnatU",
                   "-O2",
                   "-gnatn"
                )  & GNAT_XX;
         when "Profile" =>
            for Default_Switches ("ada") use
                (  "-g",
                   "-pg"
                )  & GNAT_XX;
      end case;
   end Compiler;

   Lib_List := ("-lgio-2.0");
 
   case Target_OS is
      when "Windows" | "Windows_NT" =>
         Lib_List := Lib_List & "-mwindows";
      when "OSX" =>
         Lib_List := Lib_List & ("-Wl,-no_pie");
      when "Linux" | "UNIX" | "FreeBSD" | "auto" =>
         null;
   end case;

   package Linker is
      case Development is
         when "Debug" =>
            for Default_Switches ("ada") use
               GtkAda.Linker'Default_Switches ("ada") & "-g" & Lib_List;
         when "Release" =>
            for Default_Switches ("ada") use
               GtkAda.Linker'Default_Switches ("ada") & "-O2" & Lib_List;
         when "Profile" =>
            for Default_Switches ("ada") use
               GtkAda.Linker'Default_Switches ("ada") & "-g" & "-pg" & "-O2" & Lib_List;
      end case;
   end Linker;

end Gtkada_Contributions;

